---
layout: post
title: "vftable"
date: 2015-10-08 12:53:25
tags: vftable
---

#### 가상함수가 있는 클래스가 메모리에 어떻게 올라가는지 확인해보자

{% highlight cpp%}
class ParentA
{
public:
	ParentA() : m_Parent(0) {
		std::cout << "ParentA::ParentA" << std::endl;
	}
	void Print() {
		std::cout << "ParentA::Print" << std::endl;
	}
private:
	int m_Parent;
};
class ParentB
{
public:
	ParentB() : m_Parent(0) {
		std::cout << "ParentB::ParentB" << std::endl;
	}
	virtual void VPrint() {
		std::cout << "ParentB::VPrint" << std::endl;
	}
	void Print() {
		std::cout << "ParentB::Print" << std::endl;
	}
private:
	int m_Parent;
};
{% endhighlight %}

{% highlight cpp%}
ParentA* parentA = new ParentA();
ParentB* parentB1 = new ParentB();
ParentB* parentB2 = new ParentB();
parentB1->Print();
parentB1->VPrint();
{% endhighlight %}

![Image of code01]({{ site.url }}/assets/vftable/code01.PNG)

컴파일러는 클래스 멤버함수에 virtual이 붙어있으면, virtual function table(vftable)을 만들며, 인스턴스 `parentB1`, `parentB2`는 vftable의 주소(`0x00c5da7c`)를 가리키는 `__vfptr`을 가진다. (클래스당 하나의 vftable이 만들어지고, 인스턴스들의 `__vfptr`은 같은 vftable을 가리킨다.) 

![Image of mem01]({{ site.url }}/assets/vftable/mem01.PNG)

`__vfptr`은 인스턴스의 메모리상에서 맨앞에 위치한다. 위 그림을 보면 `parentB1`(`0x00af8738`)의 맨앞에 vftable(`0x00c5da7c`)의 주소를 가리키는 `__vfptr`이 위치함을 알수 있다.

![Image of mem02]({{ site.url }}/assets/vftable/mem02.PNG)

vftable(`0x00c5da7c`)에는 가상함수(`VPrint`)를 가리키는 주소(`0x00c51118`)가 존재한다.

![Image of code01]({{ site.url }}/assets/vftable/draw02.PNG)

<br>

***************************************************
***************************************************

#### 가상함수가 어떻게 호출되는지 알아보자

`parentB1->Print()`의 asm은 아래와 같다.
{% highlight xml %}
mov         ecx,dword ptr [parentB1]  
call        ParentB::Print (0C51230h) // Print함수를 곧바로 호출한다.
{% endhighlight %}

`parentB1->VPrint()`의 asm은 아래와 같다.
{% highlight xml %}
mov         eax,dword ptr [parentB1]  // (1)
mov         edx,dword ptr [eax]       // (2)
mov         esi,esp                   
mov         ecx,dword ptr [parentB1]   
mov         eax,dword ptr [edx]       // (3)
call        eax                       // (4)
cmp         esi,esp  
call        __RTC_CheckEsp (0C5134Dh)  
{% endhighlight %}

1. parentB1 주소(`0x00af8738`)를 eax에 넣는다.
2. eax 주소(`0x00af8738`)에서 dword 크기만큼의 데이터(`0x00c5da7c`)를 edx에 넣는다.      
- vftable의 주소를 edx에 넣는다.
3. edx 주소(`0x00c5da7c`)에서 dword 크기만큼의 데이터(`0x00c51118`)를 eax에 넣는다.
- vftable에서 첫번째 가상함수(`VPrint`)의 주소를 eax에 넣는다.
4. eax를 호출한다.
- `VPrint`를 호출한다.

**둘의 차이는, 비가상함수는 곧바로 호출하고, 가상함수는 vftable을 통해서 호출을 한다는 것이다.**

<br>

***************************************************
***************************************************

#### 가상함수의 상속에 대해서 알아보자

{% highlight cpp %}
class Child : public ParentB
{
public:
	Child() : m_Child(0) {
		std::cout << "Child::Child" << std::endl;
	}
	virtual void VPrint() {
		std::cout << "Child::VPrint" << std::endl;
	}
	void Print() {
		std::cout << "Child::Print" << std::endl;
	}
private:
	int m_Child;
};
{% endhighlight %}

{% highlight cpp %}
ParentB* parentB1 = new ParentB();
ParentB* parentB2 = new Child();
parentB2->VPrint();
{% endhighlight %}

모두가 알다시피 위 코드의 결과는 `"Child::VPrint"` 이다. 어떻게 그렇게 되는걸까?

![Image of code01]({{ site.url }}/assets/vftable/code02.PNG)

위 그림을 보면 알수 있듯이 `parentB1`의 vftable 주소(`0x00f3da6c`)와 `parentB2`의 vftable 주소(`0x00f3db38`)가 다름을 확인할수 있다. 이를 통해 `parentB2`는 `ParentB` 클래스의 vftable을 사용하는게 아니라 `Child` 클래스의 vftable을 사용하는것을 알수 있고, 결론적으로 `parentB2`의 `VPrint`를 호출하게 되면 `Child::VPrint`가 호출되는 것이다.

**`parentB2`의 `__vfptr`은 어떻게 `Child` 클래스의 vftable을 가리키게 된걸까?**

이는 `ParentB` 클래스의 생성자와 `Child` 클래스의 생성자에 브레이크를 걸고 보면 확인할수 있다.

1. `ParentB` 생성자가 호출된다.
- `__vfptr`이 `ParentB` 클래스의 vftable을 가리키고 있는다. 
2. `Child` 생성자가 호출된다.
- `__vfptr`을 `Child` 클래스의 vftable 주소로 덮어쓰게 된다.
    
![Image of code01]({{ site.url }}/assets/vftable/draw03.PNG)

<br>

***************************************************
***************************************************

#### virtual 소멸자에 대해서 알아보자.

{% highlight cpp%}
class ParentB
{
public:
	ParentB() : m_Parent(0) {}
	virtual ~ParentB() {}
private:
	int m_Parent;
};
{% endhighlight %}

{% highlight cpp%}
int main()
{

    ParentB* parentB2 = new ParentB(); 
    delete parentB2; 
}
{% endhighlight %}

![Image of code01]({{ site.url }}/assets/vftable/code03.PNG)

위 코드에서는 소멸자 `~ParentB()`에 virtual을 붙였다. 그런데 vftable을 보면 위에서 살펴본 `VPrint`랑은 뭔가 다르다, 이름이 `~ParentB`가 아니라 `vector deleting destructor`라는 이름으로 들어가 있다. 뭘까? 일단 asm 부터 살펴 보자.

`delete parentB2`의 asm은 아래와 같다.
{% highlight xml %}
mov         eax,dword ptr [parentB2]  
mov         dword ptr [ebp-0F0h],eax  
mov         ecx,dword ptr [ebp-0F0h]  
mov         dword ptr [ebp-0FCh],ecx  
cmp         dword ptr [ebp-0FCh],0    
je          wmain+0E9h (0B15169h)     
mov         esi,esp  
push        1  
mov         edx,dword ptr [ebp-0FCh]  
mov         eax,dword ptr [edx]       
mov         ecx,dword ptr [ebp-0FCh]  
mov         edx,dword ptr [eax]       
call        edx                       // ParentB::vector deleting destructor 호출
{% endhighlight %}

위는 heap에 생성된 인스턴스를 해제하기 위한 `delete` 코드인데, `virtual VPrint`에서 이미 살펴본 것 처럼 vftable을 이용해서 `vector deleting desturctor`를 호출하고 있다.

call edx 안으로 들어가보자.

{% highlight xml %}
ParentB::`vector deleting destructor':
...
call        ParentB::~ParentB  // 1. 소멸자 호출
...
call        operator delete    // 2. 메모리 반환
...
ret         4
{% endhighlight %}

위 내용을 보면 알수 있듯이.. 소멸자에 virtual이 붙어있으면 vftable에 `vector deleting destructor`가 추가되며, `vector deleting destructor` 안에서 소멸자(`~ParentB`)와 `delete`를 호출하게 된다.

<br>

***************************************************
***************************************************

#### 이어서, virtual 소멸자와 상속에 대해서 알아보자

{% highlight cpp%}
class ParentB
{
public:
	ParentB() : m_Parent(0) {}
	virtual ~ParentB() {}
private:
	int m_Parent;
};
class Child : public ParentB
{
public:
	Child() : m_Child(0) {}
	virtual ~Child() {}
private:
	int m_Child;
};
{% endhighlight %}

{% highlight cpp%}
int main()
{
	ParentB* child = new Child();
	delete child;
}
{% endhighlight %}

소멸자에 virtual이 붙어있는 `ParentB`를 상속받아서 `child`의 소멸이 어떻게 진행되는지 살펴보자. 아래코드는 `delete child`의 asm 이다.
{% highlight xml %}
mov         eax,dword ptr [child]  
mov         dword ptr [ebp-0E0h],eax  
mov         ecx,dword ptr [ebp-0E0h]  
mov         dword ptr [ebp-0ECh],ecx  
cmp         dword ptr [ebp-0ECh],0  
je          wmain+0D9h (065A49h)  
mov         esi,esp  
push        1  
mov         edx,dword ptr [ebp-0ECh]  
mov         eax,dword ptr [edx]  
mov         ecx,dword ptr [ebp-0ECh]  
mov         edx,dword ptr [eax]  
call        edx                        // (1) Child::vector deleting destructor 호출
//////////////////////////////////////////////////////////////////
Child::`vector deleting destructor':
...
call        Child::~Child  // (2)
...
call        operator delete  // (4)
...
ret         4  
//////////////////////////////////////////////////////////////////
virtual ~Child() 
{
... 
}
...
call        ParentB::~ParentB  // (3)
ret  
{% endhighlight %}

1. vftable을 통해서 Child::vector deleting destructor 호출
2. ~Child 호출
3. ~ParentB 호출
4. delete 호출

이번에는 `ParentB`의 소멸자에서 virtual을 빼고 다시 한번 `delete child`를 해보자.

{% highlight xml %}
	delete parentB2;
 mov         eax,dword ptr [parentB2]  
 mov         dword ptr [ebp-0E0h],eax  
 mov         ecx,dword ptr [ebp-0E0h]  
 mov         dword ptr [ebp-0ECh],ecx  
 cmp         dword ptr [ebp-0ECh],0  
 je          wmain+0C9h (09652C9h)  
 push        1  
 mov         ecx,dword ptr [ebp-0ECh]  
 call        ParentB::`scalar deleting destructor' (0961541h)  // (1)
 mov         dword ptr [ebp-10Ch],eax  
 jmp         wmain+0D3h (09652D3h)  
 mov         dword ptr [ebp-10Ch],0  
{% endhighlight %}

이번에는 `ParentB`의 `scalar deleting destructor`를 곧바로 호출(1)하게 되었다. 결과적으로 `Child`의 소멸자는 호출되지 않고, `ParentB`의 소멸자만 호출되게 되었다.

결론을 내리면.. `delete`는 해당 인스턴스의 소멸자(ex. `~ParentB()`, `~Child()`)를 호출하는게 아니라, `destructor`를 호출하게 되어있고, `destructor`안에서 소멸자를 호출하게 된다. 이렇게 하는 이유는 생성자, 소멸자는 상속이 안되기 때문이다. 그래서 `destructor`를 만들어서 상속시키는 것이다.

<br>

***************************************************
***************************************************

원래 적고 싶었던건 CRTP(Curiously recurring template pattern)에 대해서 였는데.. 어쩌다보니 vftable에 대해서 적게 되었다. 사실.. vftable이 어떻게 동작하는지 책에서만 봐서 그동안 "그런가보다.." 하면서 사용해왔는데, 이번기회에 디버깅 좀 해봤다. 덕분에 어셈블리도 조금 알게됬네. ㅋㅋ

CRTP를 사용하는 이유는 vftable을 이용해서 런타임에 동적으로 동작하는 방식은 성능에 나쁘기 때문에(주소연산이 많이 들어가니까), 템플릿을 이용해서 컴파일타임에 결정하기 위해서다.

CRTP는 다음시간에 ㅎㅎ