---
layout: post
title: "Data In, Data Out"
date: 2016-02-02 09:53:25
tags: data elasticsearch
---

원문 : [https://www.elastic.co/guide/en/elasticsearch/guide/current/data-in-data-out.html](https://www.elastic.co/guide/en/elasticsearch/guide/current/data-in-data-out.html)

어떤 프로그램을 작성하던지, 우리는 동일한 목표를 가지고 있다.
그건 바로 데이터를 우리의 목적에 맞게 제공하기 좋은 방식으로 구성하는 것이다.
하지만 데이터는 단순한 랜덤비트나 바이트들로 구성되어 있지 않고,
엔티티 혹은 실세계에 존재하는 어떤것을 표현하기 위해서 데이터요소 사이의 관계를 맺어줘야 한다.

실세계에서 같은 타입의 엔티티는 같은 모습으로 보이지 않는다. 
어떤 사람은 집전화번호를 가지고 있는 반면, 어떤 사람은 오직 핸드폰번호만 가지고 있을수도 있고, 어떤 사람은 둘다 가지고 있을수 있다.
그리고 어떤 사람은 이메일주소를 3개를 가지고 있을수도 있고, 어떤 사람은 이메일주소가 없을수도 있다.
그리고 영국 사람은 성이 무조건 하나인 반면, 스페인 사람은 성을 2개 가지고 있을수도 있다.

OOP가 유명해진 이유중에 하나는 오브젝트가 실세계의 엔티티를 표현하고 조작하는데 도움이 되었기 때문이다. 
비록 메모리상에 엔티티를 표현하기 위해 복잡한 데이터 구조를 사용했지만 말이다. 
그리고 이러한 OOP스타일은 지금까지는 그런대로 잘 사용되었다.

문제는 이러한 엔티티들을 저장하려고 할때 생긴다. 
전통적으로, 우리는 관계형 데이터베이스에 컬럼과 로우로 데이터를 저장해왔다. 스프레드시트 처럼 말이다.
그리고 이 과정에서 오브젝트를 사용함으로써 얻었던 모든 유연성이 사라지게 된다.
왜냐하면 우리의 저장매체(ex. 스프레드시트)는 유연하지 않기 때문이다.

만약, 스프레드시트 처럼 컬럼과 로우로 이루어진 제한된 방식이 아니라, 오브젝트를 오브젝트 자체로 저장할수 있다면? 
그렇다면 우리는 데이터 저장이 아니라 사용에 초점을 맞출수 있게 되고, 오브젝트의 유연성을 되찾을수 있게 된다.

메모리상의 데이터 구조 측면에서 보면, 오브젝트는 개발언어마다 다르게 표현된다. 
하지만 네트워크를 통해서 전송하거나 저장할때는 표준을 따라야 한다.
따라서 NoSQL 세계에서는 데이터를 교환하는데 있어서 JSON을 표준으로 사용하고 있는데,
JSON은 컬럼과 로우가 아닌 오브젝트를 오브젝트 자체로 저장할수 있도록 해준다.
(오브젝트를 JSON 형태로 Serialize 시킨 것을 JSON 문서라고 부른다.)

엘라스틱서치는 분산 문서 저장소 이며, 실시간으로 JSON 문서를 저장하고 가져올수 있다.
다른말로 하면, 엘라스틱서치에 문서가 저장되자마자, 클러스터의 어떤 노드에서든지 그 데이터를 가져올수 있는 것이다.

물론, 우리는 데이터를 저장하는 것 뿐만 아니라, 빠르게 한꺼번에 쿼리하는 것을 원한다. 
하지만 많은 NoSQL 솔루션들이 여전히 우리 개발자들에게 데이터를 어떻게 쿼리할것인지
빠른 조회를 위해 어떤 필드에 인덱스를 걸어야 하는지 고민하도록 요구하고 있다.

이를 해소하기 위해, 엘라스틱서치에서는 모든 필드의 모든 데이터를 인덱스 하는것이 기본이다. 
다른 데이터베이스와는 다르게, 모든 필드는 빠른 조회를 위해 전용의 역인덱스를 가지고 있는 것이다.